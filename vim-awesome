#!/bin/sh

# URLs
BASE_URL='https://vimawesome.com'
API_URL="$BASE_URL/api"
PLUGINS_URL="$API_URL/plugins";

# Plugin JSON keys
JSON_NAME="slug"
JSON_AUTHOR="author"
JSON_CATEGORY="category"
JSON_DESCRIPTION="github_short_desc"
JSON_TAGS="tags"

# Application Files
VA_CACHE_DIR="${XDG_CACHE_DIR:-"$HOME/.cache/vim-awesome"}"
VA_PLUGINS_DATA_DIR="$VA_CACHE_DIR/plugins"
VA_CONFIG_FILE="${XDG_CONFIG_HOME:-"$HOME/.config/vim-awesome/config"}"

# Vim Files
VA_VIM_PLUGIN_DIR="$(sed -E 's/^packages-directory (.*)$/\1/' "$VA_CONFIG_FILE" || echo "$HOME/.vim/pack")/vim-awesome/start"

# Ensure that the application directories exist
test -d "$VA_CACHE_DIR" || mkdir -p "$VA_CACHE_DIR" || exit 1
test -d "$VA_PLUGINS_DATA_DIR" || mkdir -p "$VA_PLUGINS_DATA_DIR" || exit 1

getPluginData() {
	jsonFile="$VA_PLUGINS_DATA_DIR/$1.json"

	if [ -f "$jsonFile" ]; then
		cat "$jsonFile"
	else
		curl -s "$PLUGINS_URL/$1" | tee "$jsonFile"
	fi
}

prettyFmtJsonPluginData() {
	# Read the json data from the input
	read -r data;

	name=$(echo "$data" | jq -r ".$JSON_NAME");
	author=$(echo "$data" | jq -r ".$JSON_AUTHOR");
	category=$(echo "$data" | jq -r ".$JSON_CATEGORY");
	description=$(echo "$data" | jq -r ".$JSON_DESCRIPTION" | fold -s | sed 's/^/\t/');
	tags=$(echo "$data" | jq -r ".$JSON_TAGS[]" | while read -r line; do printf '\t* %s\n' "$line"; done)

	echo "Name: $name"
	echo "Author: $author"
	echo "Category: $category"
	echo "Description:"
	echo "$description"
	echo "Tags:"
	echo "$tags"
}

va_clear() {
	rm "${VA_CACHE_DIR:?}/*" -r
}

va_search() {
	if TEMP=$(getopt -o 'ci' -l 'cached,installed' -n 'vim-awesome' -- "$@"); then

		eval set -- "$TEMP"

		# Parse option flags
		onlyCached=0
		onlyInstalled=0
		while true; do
			case "$1" in
				'-c'|'--cached')
					onlyCached=1
					shift
				;;
				'-i'|'--installed')
					onlyInstalled=1
					shift
				;;
				'--')
					shift
					break
				;;
				*)
					echo 'CLI parse error' >&2
				;;
			esac	
		done

		if [ "$onlyCached" -eq 1 ]; then
			find "$VA_PLUGINS_DATA_DIR" -mindepth 1 -maxdepth 1 -type f -printf '%f\n' | sed 's/.json$//'
			exit 0
		fi

		if [ "$onlyInstalled" -eq 1 ]; then
			test -d "$VA_VIM_PLUGIN_DIR" && find "$VA_VIM_PLUGIN_DIR" -mindepth 1 -maxdepth 1 -type d -printf '%f\n'
			exit 0
		fi

		# Build the query string
		query=$(echo "$*" | tr ' ' '+')

		# Performs the search
		jsonData=$(curl -s "$PLUGINS_URL?query=$query&page=1" | jq -c -r '.plugins[]')
		echo "$jsonData" | while read -r plugin; do
			pluginName=$(echo "$plugin" | jq -r ".$JSON_NAME")

			# Cache the plugin information
			echo "$plugin" > "$VA_PLUGINS_DATA_DIR/$pluginName.json"

			# Display the plugin information
			echo "$plugin" | jq -r ".$JSON_NAME"
			echo "$plugin" | jq -r ".$JSON_DESCRIPTION" | fold -s | sed 's/^/\t/'
		done
	else
		exit 1
	fi
}

va_show() {
	TEMP=$(getopt -o 'w' -l 'web' -n 'vim-awesome' -- "$@" || exit 1)
	eval set -- "$TEMP"

	showWeb=0
	while true; do
		case "$1" in
			'-w'|'--web')
				showWeb=1
				shift
			;;
			'--')
				shift
				break
			;;
		esac
	done

	isXdgOpenInstalled=$(which xdg-open 2> /dev/null)
	if [ "$showWeb" -eq 1 ] && [ -n "$isXdgOpenInstalled" ]; then
		xdg-open "$BASE_URL/plugin/$1"
	else
		# Alert the user if the website was requested, but couldn't be launched
		if [ "$showWeb" -eq 1 ]; then
			echo "ERROR: The '--web' flag was used, but xdg-open is not installed" > /dev/stderr
		fi

		getPluginData "$1" | prettyFmtJsonPluginData
	fi
}

va_install() {

	for package in "$@"; do
		# Get the plugin data
		jsonData=$(getPluginData "$package" | jq -r '{ github_url, slug }')
		pluginName=$(echo "$jsonData" | jq -r '.slug')
		repoUrl=$(echo "$jsonData" | jq -r '.github_url')

		# Add the git submodule
		git clone -- "$repoUrl" "$VA_VIM_PLUGIN_DIR/$pluginName"
	done

}

va_upgrade() {
	git --git-dir="$VA_VIM_CONFIG_DIR/pack/vim-awesome/start/$1/.git" pull
}

va_uninstall() {
	for package in "$@"; do
		rm -rf "${VA_VIM_PLUGIN_DIR:?}/$package"
	done
}

va_command="$1"
shift
case "$va_command" in
	'clear')
		va_clear "$@"
		;;
	'search')
		va_search "$@"
		;;
	'show')
		va_show "$@"
		;;
	'install')
		va_install "$@"
		;;
	'upgrade')
		va_upgrade "$@"
		;;
	'uninstall')
		va_uninstall "$@"
		;;
	*)
		echo "The command '$1' is not recognized" > /dev/stderr
		;;
esac

