#!/usr/bin/bash

# URLs
BASE_URL='https://vimawesome.com'
API_URL="$BASE_URL/api"
PLUGINS_URL="$API_URL/plugins";

# Plugin JSON keys
JSON_NAME="slug"
JSON_AUTHOR="author"
JSON_CATEGORY="category"
JSON_DESCRIPTION="github_short_desc"

# Application Files
VA_CACHE_DIR="${XDG_CACHE_DIR:-"$HOME/.cache/vim-awesome"}"
VA_PLUGINS_DATA_DIR="$VA_CACHE_DIR/plugins"
VA_CONFIG_FILE="${XDG_CONFIG_HOME:-"$HOME/.config/vim-awesome/config"}"

# Vim Files
VA_VIM_PLUGIN_DIR="$(sed -E 's/^packages-directory (.*)$/\1/' "$VA_CONFIG_FILE" || echo "$HOME/.vim/pack")/vim-awesome/start"

# Ensure that the application directories exist
test -d "$VA_CACHE_DIR" || mkdir -p "$VA_CACHE_DIR" || exit 1
test -d "$VA_PLUGINS_DATA_DIR" || mkdir -p "$VA_PLUGINS_DATA_DIR" || exit 1

getPluginData() {
	local jsonFile
	jsonFile="$VA_PLUGINS_DATA_DIR/$1.json"

	if [[ -f "$jsonFile" ]]; then
		cat "$jsonFile"
	else
		curl -s "$PLUGINS_URL/$1" | tee "$jsonFile"
	fi
}

prettyFmtJsonPluginData() {
	# Read the json data from the input
	local data name author category description;
	read -r data;

	name=$(echo "$data" | jq -r ".$JSON_NAME");
	author=$(echo "$data" | jq -r ".$JSON_AUTHOR");
	category=$(echo "$data" | jq -r ".$JSON_CATEGORY");
	description=$(echo "$data" | jq -r ".$JSON_DESCRIPTION" | fold -s | sed 's/^/\t/');

	echo "Name: $name"
	echo "Author: $author"
	echo "Category: $category"
	echo "Description:"
	echo "$description"
}

va_clear() {
	rm "${VA_CACHE_DIR:?}/*" -r
}

va_search() {
	TEMP=$(getopt -o 'ci' -l 'cached,installed' -n 'vim-awesome' -- "$@")
	if [ $? -ne 0 ]; then
		exit 1
	fi

	eval set -- "$TEMP"

	# Parse option flags
	local onlyInstalled
	while true; do
		case "$1" in
			'-c'|'--cached')
				onlyCached=1
				shift
			;;
			'-i'|'--installed')
				onlyInstalled=1
				shift
			;;
			'--')
				shift
				break
			;;
			*)
				echo 'CLI parse error' >&2
			;;
		esac	
	done

	if [[ "$onlyCached" -eq 1 ]]; then
		find "$VA_PLUGINS_DATA_DIR" -mindepth 1 -maxdepth 1 -type f -printf '%f\n' | sed 's/.json$//'
		exit 0
	fi

	if [[ "$onlyInstalled" -eq 1 ]]; then
		test -d "$VA_VIM_PLUGIN_DIR" && find "$VA_VIM_PLUGIN_DIR" -mindepth 1 -maxdepth 1 -type d -printf '%f\n'
		exit 0
	fi

	# Performs the search
	local jsonData pluginName
	jsonData=$(curl -s "$PLUGINS_URL?query=$1&page=1" | jq -c -r '.plugins[]')
	while read -r plugin; do
		pluginName=$(echo "$plugin" | jq -r ".$JSON_NAME")

		# Cache the plugin information
		echo "$plugin" > "$VA_PLUGINS_DATA_DIR/$pluginName.json"

		# Display the plugin information
		local name description
		echo "$(echo "$plugin" | jq -r ".$JSON_NAME")"
		echo "$(echo "$plugin" | jq -r ".$JSON_DESCRIPTION" | fold -s | sed 's/^/\t/')"
	done <<< "$jsonData"
}

va_show() {
	TEMP=$(getopt -o 'w' -l 'web' -n 'vim-awesome' -- "$@" || exit 1)
	eval set -- "$TEMP"

	local showWeb;
	while true; do
		case "$1" in
			'-w'|'--web')
				showWeb=1
				shift
			;;
			'--')
				shift
				break
			;;
		esac
	done

	local isXdgOpenInstalled;
	isXdgOpenInstalled=$(type -t xdg-open)
	if [[ "$showWeb" -eq 1 && -n "$isXdgOpenInstalled" ]]; then
		xdg-open "$BASE_URL/plugin/$1"
	else
		# Alert the user if the website was requested, but couldn't be launched
		if [[ "$showWeb" -eq 1 ]]; then
			echo "ERROR: The '--web' flag was used, but xdg-open is not installed" > /dev/stderr
		fi

		getPluginData "$1" | prettyFmtJsonPluginData
	fi
}

va_install() {
	local jsonData pluginName repoUrl

	# Get the plugin data
	jsonData=$(getPluginData "$1" | jq -r '{ github_url, slug }')
	pluginName=$(echo "$jsonData" | jq -r '.slug')
	repoUrl=$(echo "$jsonData" | jq -r '.github_url')

	# Add the git submodule
	git clone -- "$repoUrl" "$VA_VIM_PLUGIN_DIR/$pluginName"
}

va_upgrade() {
	git --git-dir="$VA_VIM_CONFIG_DIR/pack/vim-awesome/start/$1/.git" pull
}

va_uninstall() {
	rm -rf "${VA_VIM_PLUGIN_DIR:?}/$1"
}

functionName="va_$1"

if [[ $(type -t "$functionName") == 'function' ]]; then
	shift
	eval "$functionName ${*:1}"
else
	echo "The command '$1' is not recognized" > /dev/stderr
fi

